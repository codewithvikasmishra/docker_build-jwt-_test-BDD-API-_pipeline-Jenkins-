# make_response is for adding additional HTTP headers to a response within a view's code.
# The Flask requestobject contains the data that the client (eg a browser) has sent to your app
from flask import Flask, request, jsonify, make_response 

# SQLAlchemy is used to create a database
from flask_sqlalchemy import SQLAlchemy

# UUID, Universal Unique Identifier, is a python library which helps in generating random objects
# of 128 bits as ids. It provides the uniqueness as it generates is on the basis of time,
# computer hardware.
import uuid

# I beleive that, from werkzueg import security and import werkzeug.security both imports as
# module security, thus security.generate_password_hash is a known and valid attribute.
from werkzeug.security import generate_password_hash, check_password_hash

# JSON web token (JWT) is an open standard that defines a compact and self-contained way for
# securely transmitting information between parties as JSON object.
import jwt
import datetime

# Functools.wraps is convenience function for invoking update_wrapper() as a function decorator,
# when defining a wrapper function.
from functools import wraps

app = Flask(__name__)

# A secret key to use the encoding of a token
app.config['SECRET_KEY'] = 'thisissecret'

# Creating sqlite database in below mentioned folder
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////jwt/app/todo.db'

# creating the db where create_all and delete_all will work on terminal while creating the db
db = SQLAlchemy(app)

# Creating User and Todo table in sqlite todo.db with below mentioned columns
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    public_id = db.Column(db.String(50), unique=True)
    name = db.Column(db.String(50))
    password = db.Column(db.String(80))
    admin = db.Column(db.Boolean)

class Todo(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.String(50))
    complete = db.Column(db.Boolean)
    user_id = db.Column(db.Integer)


def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = None

        # Checking the token in headers (like in headers of Postman) and key should be only
        # 'x-access-token'
        if 'x-access-token' in request.headers:
            token = request.headers['x-access-token']

        # If token is not available in header then sending message as Token is missing!
        if not token:
            return jsonify({'message' : 'Token is missing!'}), 401

        try: 
            # without implementing algorithms in line 67 and 194 its sending me invalid token
            # when I am using in another api after login, algorithms is required for decode
            data = jwt.decode(token, app.config['SECRET_KEY'],algorithms=["HS256"])
            print(data['public_id'])
            current_user = User.query.filter_by(public_id=data['public_id']).first()
        except:
            return jsonify({'message' : 'Token is invalid!'}), 401

        return f(current_user, *args, **kwargs)

    return decorated

@app.route('/user', methods=['GET'])
@token_required
def get_all_users(current_user):

    if not current_user.admin:
        return jsonify({'message' : 'User is not admin so Cannot perform that function!'})

    users = User.query.all()

    output = []

    for user in users:
        user_data = {}
        user_data['public_id'] = user.public_id
        user_data['name'] = user.name
        user_data['password'] = user.password
        user_data['admin'] = user.admin
        output.append(user_data)

    return jsonify({'users' : output})

@app.route('/user/<public_id>', methods=['GET'])
@token_required
def get_one_user(current_user, public_id):

    if not current_user.admin:
        return jsonify({'message' : 'Cannot perform that function!'})

    user = User.query.filter_by(public_id=public_id).first()

    if not user:
        return jsonify({'message' : 'No user found!'})

    user_data = {}
    user_data['public_id'] = user.public_id
    user_data['name'] = user.name
    user_data['password'] = user.password
    user_data['admin'] = user.admin

    return jsonify({'user' : user_data})

@app.route('/user', methods=['POST'])
@token_required
def create_user(current_user):
    if not current_user.admin:
        return jsonify({'message' : 'Token user is not admin so cannot perform that function!'})

    # Getting the JSON data whcih we will pass in Postman API
    data = request.get_json()

    # Generating the hash password which we will receive from data above (postman)
    # and we are using sha256 hashing algoritm to hash the data
    hashed_password = generate_password_hash(data['password'], method='sha256')

    # Creating new user where public_id generated by uuid4 (we are having uuid1, uuid3, uuid4 and uuid5).
    # name is coming from data which we get from postman and pwd is hash pwd
    # and admin set to be false (means user is not a admin)
    new_user = User(public_id=str(uuid.uuid4()), name=data['name'], password=hashed_password, admin=False)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({'message' : 'New user created!'})

@app.route('/user/<public_id>', methods=['PUT'])
@token_required
def promote_user(current_user, public_id):
    if not current_user.admin:
        return jsonify({'message' : 'Cannot perform that function!'})

    user = User.query.filter_by(public_id=public_id).first()

    if not user:
        return jsonify({'message' : 'No user found!'})

    user.admin = True
    db.session.commit()

    return jsonify({'message' : 'The user has been promoted as admin!'})

@app.route('/user/<public_id>', methods=['DELETE'])
@token_required
def delete_user(current_user, public_id):
    if not current_user.admin:
        return jsonify({'message' : 'Cannot perform that function!'})

    user = User.query.filter_by(public_id=public_id).first()

    if not user:
        return jsonify({'message' : 'No user found!'})

    db.session.delete(user)
    db.session.commit()

    return jsonify({'message' : 'The user has been deleted!'})

@app.route('/login')
def login():

    # Getting the authorization information from postman
    auth = request.authorization

    if not auth or not auth.username or not auth.password:
        return make_response('Could not verify', 401, {'WWW-Authenticate' : 'Basic realm="Login required!"'})

    # Retreiving the user name from databse and Storing in a variable user
    user = User.query.filter_by(name=auth.username).first()

    if not user:
        return make_response('Could not verify', 401, {'WWW-Authenticate' : 'Basic realm="Login required!"'})

    # First we are cheking the password is matching or not from database (user.password) and auth.password (postman)
    # if its match then generating the token for 30 min active period
    if check_password_hash(user.password, auth.password):
        # without implementing algorithms in line 67 and 194 its sending me invalid token
        # when I am using in another api after login, algorithms is required for decode
        token = jwt.encode({'public_id' : user.public_id, 'exp' : datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'],algorithm="HS256")

        return jsonify({'token' : token}) #Need to add token.decode('UTF-8')

    return make_response('Could not verify', 401, {'WWW-Authenticate' : 'Basic realm="Login required!"'})

@app.route('/todo', methods=['GET'])
@token_required
def get_all_todos(current_user):
    todos = Todo.query.filter_by(user_id=current_user.id).all()

    output = []

    for todo in todos:
        todo_data = {}
        todo_data['id'] = todo.id
        todo_data['text'] = todo.text
        todo_data['complete'] = todo.complete
        output.append(todo_data)

    return jsonify({'todos' : output})

@app.route('/todo/<todo_id>', methods=['GET'])
@token_required
def get_one_todo(current_user, todo_id):
    todo = Todo.query.filter_by(id=todo_id, user_id=current_user.id).first()

    if not todo:
        return jsonify({'message' : 'No todo found!'})

    todo_data = {}
    todo_data['id'] = todo.id
    todo_data['text'] = todo.text
    todo_data['complete'] = todo.complete

    return jsonify(todo_data)

@app.route('/todo', methods=['POST'])
@token_required
def create_todo(current_user):
    data = request.get_json()

    new_todo = Todo(text=data['text'], complete=False, user_id=current_user.id)
    db.session.add(new_todo)
    db.session.commit()

    return jsonify({'message' : "Todo created!"})

@app.route('/todo/<todo_id>', methods=['PUT'])
@token_required
def complete_todo(current_user, todo_id):
    todo = Todo.query.filter_by(id=todo_id, user_id=current_user.id).first()

    if not todo:
        return jsonify({'message' : 'No todo found!'})

    todo.complete = True
    db.session.commit()

    return jsonify({'message' : 'Todo item has been completed!'})

@app.route('/todo/<todo_id>', methods=['DELETE'])
@token_required
def delete_todo(current_user, todo_id):
    todo = Todo.query.filter_by(id=todo_id, user_id=current_user.id).first()

    if not todo:
        return jsonify({'message' : 'No todo found!'})

    db.session.delete(todo)
    db.session.commit()

    return jsonify({'message' : 'Todo item deleted!'})

if __name__ == '__main__':
    app.run(debug=True)